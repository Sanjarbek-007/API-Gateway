// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: wearable.proto

package health

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddWearableDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceType string `protobuf:"bytes,2,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	DataType   string `protobuf:"bytes,3,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	DataValue  string `protobuf:"bytes,4,opt,name=data_value,json=dataValue,proto3" json:"data_value,omitempty"`
}

func (x *AddWearableDataReq) Reset() {
	*x = AddWearableDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWearableDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWearableDataReq) ProtoMessage() {}

func (x *AddWearableDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWearableDataReq.ProtoReflect.Descriptor instead.
func (*AddWearableDataReq) Descriptor() ([]byte, []int) {
	return file_wearable_proto_rawDescGZIP(), []int{0}
}

func (x *AddWearableDataReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddWearableDataReq) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *AddWearableDataReq) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *AddWearableDataReq) GetDataValue() string {
	if x != nil {
		return x.DataValue
	}
	return ""
}

type AddWearableDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddWearableDataRes) Reset() {
	*x = AddWearableDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWearableDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWearableDataRes) ProtoMessage() {}

func (x *AddWearableDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWearableDataRes.ProtoReflect.Descriptor instead.
func (*AddWearableDataRes) Descriptor() ([]byte, []int) {
	return file_wearable_proto_rawDescGZIP(), []int{1}
}

func (x *AddWearableDataRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetWearableDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (x *GetWearableDataReq) Reset() {
	*x = GetWearableDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWearableDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWearableDataReq) ProtoMessage() {}

func (x *GetWearableDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWearableDataReq.ProtoReflect.Descriptor instead.
func (*GetWearableDataReq) Descriptor() ([]byte, []int) {
	return file_wearable_proto_rawDescGZIP(), []int{2}
}

func (x *GetWearableDataReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetWearableDataReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *GetWearableDataReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

type Warable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName         string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName          string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	DeviceType        string `protobuf:"bytes,4,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	DataType          string `protobuf:"bytes,5,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	DataValue         string `protobuf:"bytes,6,opt,name=data_value,json=dataValue,proto3" json:"data_value,omitempty"`
	RecordedTimestamp string `protobuf:"bytes,7,opt,name=recorded_timestamp,json=recordedTimestamp,proto3" json:"recorded_timestamp,omitempty"`
}

func (x *Warable) Reset() {
	*x = Warable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Warable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Warable) ProtoMessage() {}

func (x *Warable) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Warable.ProtoReflect.Descriptor instead.
func (*Warable) Descriptor() ([]byte, []int) {
	return file_wearable_proto_rawDescGZIP(), []int{3}
}

func (x *Warable) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Warable) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Warable) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Warable) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *Warable) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *Warable) GetDataValue() string {
	if x != nil {
		return x.DataValue
	}
	return ""
}

func (x *Warable) GetRecordedTimestamp() string {
	if x != nil {
		return x.RecordedTimestamp
	}
	return ""
}

type GetWearableDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Warable []*Warable `protobuf:"bytes,1,rep,name=warable,proto3" json:"warable,omitempty"`
}

func (x *GetWearableDataRes) Reset() {
	*x = GetWearableDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWearableDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWearableDataRes) ProtoMessage() {}

func (x *GetWearableDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWearableDataRes.ProtoReflect.Descriptor instead.
func (*GetWearableDataRes) Descriptor() ([]byte, []int) {
	return file_wearable_proto_rawDescGZIP(), []int{4}
}

func (x *GetWearableDataRes) GetWarable() []*Warable {
	if x != nil {
		return x.Warable
	}
	return nil
}

type GetWearableDataByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetWearableDataByIdReq) Reset() {
	*x = GetWearableDataByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWearableDataByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWearableDataByIdReq) ProtoMessage() {}

func (x *GetWearableDataByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWearableDataByIdReq.ProtoReflect.Descriptor instead.
func (*GetWearableDataByIdReq) Descriptor() ([]byte, []int) {
	return file_wearable_proto_rawDescGZIP(), []int{5}
}

func (x *GetWearableDataByIdReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type WearableById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId            string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceType        string `protobuf:"bytes,3,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	DataType          string `protobuf:"bytes,4,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	DataValue         string `protobuf:"bytes,5,opt,name=data_value,json=dataValue,proto3" json:"data_value,omitempty"`
	RecordedTimestamp string `protobuf:"bytes,6,opt,name=recorded_timestamp,json=recordedTimestamp,proto3" json:"recorded_timestamp,omitempty"`
}

func (x *WearableById) Reset() {
	*x = WearableById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearableById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearableById) ProtoMessage() {}

func (x *WearableById) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearableById.ProtoReflect.Descriptor instead.
func (*WearableById) Descriptor() ([]byte, []int) {
	return file_wearable_proto_rawDescGZIP(), []int{6}
}

func (x *WearableById) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WearableById) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WearableById) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *WearableById) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *WearableById) GetDataValue() string {
	if x != nil {
		return x.DataValue
	}
	return ""
}

func (x *WearableById) GetRecordedTimestamp() string {
	if x != nil {
		return x.RecordedTimestamp
	}
	return ""
}

type GetWearableDataByIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetWarableId *WearableById `protobuf:"bytes,1,opt,name=get_warable_id,json=getWarableId,proto3" json:"get_warable_id,omitempty"`
}

func (x *GetWearableDataByIdRes) Reset() {
	*x = GetWearableDataByIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWearableDataByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWearableDataByIdRes) ProtoMessage() {}

func (x *GetWearableDataByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWearableDataByIdRes.ProtoReflect.Descriptor instead.
func (*GetWearableDataByIdRes) Descriptor() ([]byte, []int) {
	return file_wearable_proto_rawDescGZIP(), []int{7}
}

func (x *GetWearableDataByIdRes) GetGetWarableId() *WearableById {
	if x != nil {
		return x.GetWarableId
	}
	return nil
}

type UpdateWearableDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceType string `protobuf:"bytes,2,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	DataType   string `protobuf:"bytes,3,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	DataValue  string `protobuf:"bytes,4,opt,name=data_value,json=dataValue,proto3" json:"data_value,omitempty"`
}

func (x *UpdateWearableDataReq) Reset() {
	*x = UpdateWearableDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWearableDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWearableDataReq) ProtoMessage() {}

func (x *UpdateWearableDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWearableDataReq.ProtoReflect.Descriptor instead.
func (*UpdateWearableDataReq) Descriptor() ([]byte, []int) {
	return file_wearable_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateWearableDataReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateWearableDataReq) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *UpdateWearableDataReq) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *UpdateWearableDataReq) GetDataValue() string {
	if x != nil {
		return x.DataValue
	}
	return ""
}

type UpdateWearableDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message bool `protobuf:"varint,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateWearableDataRes) Reset() {
	*x = UpdateWearableDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWearableDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWearableDataRes) ProtoMessage() {}

func (x *UpdateWearableDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWearableDataRes.ProtoReflect.Descriptor instead.
func (*UpdateWearableDataRes) Descriptor() ([]byte, []int) {
	return file_wearable_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateWearableDataRes) GetMessage() bool {
	if x != nil {
		return x.Message
	}
	return false
}

type DeleteWearableDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteWearableDataReq) Reset() {
	*x = DeleteWearableDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWearableDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWearableDataReq) ProtoMessage() {}

func (x *DeleteWearableDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWearableDataReq.ProtoReflect.Descriptor instead.
func (*DeleteWearableDataReq) Descriptor() ([]byte, []int) {
	return file_wearable_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteWearableDataReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteWearableDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message bool `protobuf:"varint,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteWearableDataRes) Reset() {
	*x = DeleteWearableDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWearableDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWearableDataRes) ProtoMessage() {}

func (x *DeleteWearableDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWearableDataRes.ProtoReflect.Descriptor instead.
func (*DeleteWearableDataRes) Descriptor() ([]byte, []int) {
	return file_wearable_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteWearableDataRes) GetMessage() bool {
	if x != nil {
		return x.Message
	}
	return false
}

var File_wearable_proto protoreflect.FileDescriptor

var file_wearable_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x41,
	0x64, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x57, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x69, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x07, 0x57, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x41, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x57,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x77, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x0c, 0x57, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x56, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x67, 0x65, 0x74,
	0x5f, 0x77, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x57, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x57, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x31,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x61, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xb3, 0x03,
	0x0a, 0x08, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x2e,
	0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x77, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x2e, 0x77,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x77, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x20, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x2e, 0x77, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x61, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x77, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x42, 0x11, 0x5a, 0x0f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wearable_proto_rawDescOnce sync.Once
	file_wearable_proto_rawDescData = file_wearable_proto_rawDesc
)

func file_wearable_proto_rawDescGZIP() []byte {
	file_wearable_proto_rawDescOnce.Do(func() {
		file_wearable_proto_rawDescData = protoimpl.X.CompressGZIP(file_wearable_proto_rawDescData)
	})
	return file_wearable_proto_rawDescData
}

var file_wearable_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_wearable_proto_goTypes = []any{
	(*AddWearableDataReq)(nil),     // 0: wearable.AddWearableDataReq
	(*AddWearableDataRes)(nil),     // 1: wearable.AddWearableDataRes
	(*GetWearableDataReq)(nil),     // 2: wearable.GetWearableDataReq
	(*Warable)(nil),                // 3: wearable.Warable
	(*GetWearableDataRes)(nil),     // 4: wearable.GetWearableDataRes
	(*GetWearableDataByIdReq)(nil), // 5: wearable.GetWearableDataByIdReq
	(*WearableById)(nil),           // 6: wearable.WearableById
	(*GetWearableDataByIdRes)(nil), // 7: wearable.GetWearableDataByIdRes
	(*UpdateWearableDataReq)(nil),  // 8: wearable.UpdateWearableDataReq
	(*UpdateWearableDataRes)(nil),  // 9: wearable.UpdateWearableDataRes
	(*DeleteWearableDataReq)(nil),  // 10: wearable.DeleteWearableDataReq
	(*DeleteWearableDataRes)(nil),  // 11: wearable.DeleteWearableDataRes
}
var file_wearable_proto_depIdxs = []int32{
	3,  // 0: wearable.GetWearableDataRes.warable:type_name -> wearable.Warable
	6,  // 1: wearable.GetWearableDataByIdRes.get_warable_id:type_name -> wearable.WearableById
	0,  // 2: wearable.Wearable.AddWearableData:input_type -> wearable.AddWearableDataReq
	2,  // 3: wearable.Wearable.GetWearableData:input_type -> wearable.GetWearableDataReq
	5,  // 4: wearable.Wearable.GetWearableDataById:input_type -> wearable.GetWearableDataByIdReq
	8,  // 5: wearable.Wearable.UpdateWearableData:input_type -> wearable.UpdateWearableDataReq
	10, // 6: wearable.Wearable.DeleteWearableData:input_type -> wearable.DeleteWearableDataReq
	1,  // 7: wearable.Wearable.AddWearableData:output_type -> wearable.AddWearableDataRes
	4,  // 8: wearable.Wearable.GetWearableData:output_type -> wearable.GetWearableDataRes
	7,  // 9: wearable.Wearable.GetWearableDataById:output_type -> wearable.GetWearableDataByIdRes
	9,  // 10: wearable.Wearable.UpdateWearableData:output_type -> wearable.UpdateWearableDataRes
	11, // 11: wearable.Wearable.DeleteWearableData:output_type -> wearable.DeleteWearableDataRes
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_wearable_proto_init() }
func file_wearable_proto_init() {
	if File_wearable_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wearable_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AddWearableDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AddWearableDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetWearableDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Warable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetWearableDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetWearableDataByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*WearableById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetWearableDataByIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateWearableDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateWearableDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteWearableDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteWearableDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wearable_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wearable_proto_goTypes,
		DependencyIndexes: file_wearable_proto_depIdxs,
		MessageInfos:      file_wearable_proto_msgTypes,
	}.Build()
	File_wearable_proto = out.File
	file_wearable_proto_rawDesc = nil
	file_wearable_proto_goTypes = nil
	file_wearable_proto_depIdxs = nil
}
