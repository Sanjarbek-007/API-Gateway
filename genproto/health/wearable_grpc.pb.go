// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: wearable.proto

package health

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Wearable_AddWearableData_FullMethodName     = "/wearable.Wearable/AddWearableData"
	Wearable_GetWearableData_FullMethodName     = "/wearable.Wearable/GetWearableData"
	Wearable_GetWearableDataById_FullMethodName = "/wearable.Wearable/GetWearableDataById"
	Wearable_UpdateWearableData_FullMethodName  = "/wearable.Wearable/UpdateWearableData"
	Wearable_DeleteWearableData_FullMethodName  = "/wearable.Wearable/DeleteWearableData"
)

// WearableClient is the client API for Wearable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WearableClient interface {
	AddWearableData(ctx context.Context, in *AddWearableDataReq, opts ...grpc.CallOption) (*AddWearableDataRes, error)
	GetWearableData(ctx context.Context, in *GetWearableDataReq, opts ...grpc.CallOption) (*GetWearableDataRes, error)
	GetWearableDataById(ctx context.Context, in *GetWearableDataByIdReq, opts ...grpc.CallOption) (*GetWearableDataByIdRes, error)
	UpdateWearableData(ctx context.Context, in *UpdateWearableDataReq, opts ...grpc.CallOption) (*UpdateWearableDataRes, error)
	DeleteWearableData(ctx context.Context, in *DeleteWearableDataReq, opts ...grpc.CallOption) (*DeleteWearableDataRes, error)
}

type wearableClient struct {
	cc grpc.ClientConnInterface
}

func NewWearableClient(cc grpc.ClientConnInterface) WearableClient {
	return &wearableClient{cc}
}

func (c *wearableClient) AddWearableData(ctx context.Context, in *AddWearableDataReq, opts ...grpc.CallOption) (*AddWearableDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddWearableDataRes)
	err := c.cc.Invoke(ctx, Wearable_AddWearableData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableClient) GetWearableData(ctx context.Context, in *GetWearableDataReq, opts ...grpc.CallOption) (*GetWearableDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWearableDataRes)
	err := c.cc.Invoke(ctx, Wearable_GetWearableData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableClient) GetWearableDataById(ctx context.Context, in *GetWearableDataByIdReq, opts ...grpc.CallOption) (*GetWearableDataByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWearableDataByIdRes)
	err := c.cc.Invoke(ctx, Wearable_GetWearableDataById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableClient) UpdateWearableData(ctx context.Context, in *UpdateWearableDataReq, opts ...grpc.CallOption) (*UpdateWearableDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWearableDataRes)
	err := c.cc.Invoke(ctx, Wearable_UpdateWearableData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableClient) DeleteWearableData(ctx context.Context, in *DeleteWearableDataReq, opts ...grpc.CallOption) (*DeleteWearableDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWearableDataRes)
	err := c.cc.Invoke(ctx, Wearable_DeleteWearableData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WearableServer is the server API for Wearable service.
// All implementations must embed UnimplementedWearableServer
// for forward compatibility
type WearableServer interface {
	AddWearableData(context.Context, *AddWearableDataReq) (*AddWearableDataRes, error)
	GetWearableData(context.Context, *GetWearableDataReq) (*GetWearableDataRes, error)
	GetWearableDataById(context.Context, *GetWearableDataByIdReq) (*GetWearableDataByIdRes, error)
	UpdateWearableData(context.Context, *UpdateWearableDataReq) (*UpdateWearableDataRes, error)
	DeleteWearableData(context.Context, *DeleteWearableDataReq) (*DeleteWearableDataRes, error)
	mustEmbedUnimplementedWearableServer()
}

// UnimplementedWearableServer must be embedded to have forward compatible implementations.
type UnimplementedWearableServer struct {
}

func (UnimplementedWearableServer) AddWearableData(context.Context, *AddWearableDataReq) (*AddWearableDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWearableData not implemented")
}
func (UnimplementedWearableServer) GetWearableData(context.Context, *GetWearableDataReq) (*GetWearableDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWearableData not implemented")
}
func (UnimplementedWearableServer) GetWearableDataById(context.Context, *GetWearableDataByIdReq) (*GetWearableDataByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWearableDataById not implemented")
}
func (UnimplementedWearableServer) UpdateWearableData(context.Context, *UpdateWearableDataReq) (*UpdateWearableDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWearableData not implemented")
}
func (UnimplementedWearableServer) DeleteWearableData(context.Context, *DeleteWearableDataReq) (*DeleteWearableDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWearableData not implemented")
}
func (UnimplementedWearableServer) mustEmbedUnimplementedWearableServer() {}

// UnsafeWearableServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WearableServer will
// result in compilation errors.
type UnsafeWearableServer interface {
	mustEmbedUnimplementedWearableServer()
}

func RegisterWearableServer(s grpc.ServiceRegistrar, srv WearableServer) {
	s.RegisterService(&Wearable_ServiceDesc, srv)
}

func _Wearable_AddWearableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWearableDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableServer).AddWearableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wearable_AddWearableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableServer).AddWearableData(ctx, req.(*AddWearableDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wearable_GetWearableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWearableDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableServer).GetWearableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wearable_GetWearableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableServer).GetWearableData(ctx, req.(*GetWearableDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wearable_GetWearableDataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWearableDataByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableServer).GetWearableDataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wearable_GetWearableDataById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableServer).GetWearableDataById(ctx, req.(*GetWearableDataByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wearable_UpdateWearableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWearableDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableServer).UpdateWearableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wearable_UpdateWearableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableServer).UpdateWearableData(ctx, req.(*UpdateWearableDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wearable_DeleteWearableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWearableDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableServer).DeleteWearableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wearable_DeleteWearableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableServer).DeleteWearableData(ctx, req.(*DeleteWearableDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Wearable_ServiceDesc is the grpc.ServiceDesc for Wearable service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wearable_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wearable.Wearable",
	HandlerType: (*WearableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddWearableData",
			Handler:    _Wearable_AddWearableData_Handler,
		},
		{
			MethodName: "GetWearableData",
			Handler:    _Wearable_GetWearableData_Handler,
		},
		{
			MethodName: "GetWearableDataById",
			Handler:    _Wearable_GetWearableDataById_Handler,
		},
		{
			MethodName: "UpdateWearableData",
			Handler:    _Wearable_UpdateWearableData_Handler,
		},
		{
			MethodName: "DeleteWearableData",
			Handler:    _Wearable_DeleteWearableData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wearable.proto",
}
